Part 1: For each operon in the reference taxa, find the orthoblocks from each taxa.
GBEER pipeline modified

1.  Build a db of the cds for each species to blast it, input is the directory that store genbank files for each taxa, output is stored in directory called db/
cmd: ./format_db.py -i genomes/ 

2. Given the gene_block_names_and_genes.txt, create a gene_block_query.fa using the reference gene bank file
a) For E.Coli:
./make_operon_query.py -i genomes/ -b E.Coli_gene_block_names_and_genes.txt -r NC_000913
b) For B.Sub:
./make_operon_query.py -i genomes/ -b B.Subtilis_gene_block_names_and_genes.txt -r NC_000964

3. Blast each files in directory db vs the fasta file gene_block_query.fa, the output are store in dictionary blast_result. The output are blast file of each tax versus the set of genes that found in all operon in the reference taxa
./blast_script.py -u gene_block_query.fa

4. The idea is group all the blast result of each taxa into operon files. Each file in the directory is a combination of blast file for each taxa vs the genes of the operon.  Input is the directory blast_result, output is in directory blast_parse. 
./blast_parse.py -b E.Coli_gene_block_names_and_genes.txt 

5.  Filtering the blast_parse to find the most optimal operon in term of event distance. Input is the directory blast_parse, output is the directory optimized_gene_block
./filter_operon_blast_results.py

6. create newick tree file. The output is stored in directory tree. The tree file is out_tree.nwk and the accession_to_common.csv provide a mapping between ncbi accession to the taxa name
./create_newick_tree.py -f phylo_order.txt -r NC_000913

7. From the directory optimized_gene_block, create a directory result that reformat the gene blocks so it can be parsed into the ROAGUE pipeline.
./get_result.py -g E.Coli_gene_block_names_and_genes.txt 



ROAGUE pipeline
