''' Author : Huy Nguyen
    Project: Testing methods from findParent
    Start  : 01/07/2016
    End    :
'''

from  findParent import countSplit
from  findParent import countDup
from  findParent import reductionSubset
from  findParent import reductionCount
from  findParent import findSetInitial_Genome
#Test
print("Here are test cases for finding the initial parent")
print("There could be many possible parents, the result is just the minimum of such cases")
print()

print("Case 0: Checking for number of time an element appear, no split")
print("Genome 1: abbcdef")
print("Genome 2: acdghh")
Genome1= 'abbcdef'
Genome2= 'acdghh'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')

print("Case1: Checking block order does not matter, both split")
print("Genome 1: ab|ce|fg")
print("Genome 2: ce|fg|ab")
Genome1= 'ab|ce|fg'
Genome2= 'ce|fg|ab'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')

print("Case2: Checking gene order in a gene block does not matter, both split")
print("Genome 1: ab|ce|fg")
print("Genome 2: ec|ba|gf")
Genome1= 'ab|ce|fg'
Genome2= 'ec|ba|gf'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')

print("Case3: prioritize gene block, both split")
print("Genome 1: abc|de|f")
print("Genome 2: a|bc|de|f")
Genome1= 'abc|de|f'
Genome2= 'a|bc|de|f'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')


print("Case4: no split and split")
print("Genome 1: abcdefgh")
print("Genome 2: a|b|c|def")
Genome1= 'abcdefgh'
Genome2= 'a|b|c|def'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')

print("Case5: duplication")
print("Genome 1: aba|ccd|e|f|g|k|l")
print("Genome 2: ecd|l|a|g|b")
Genome1= 'aba|ccd|e|f|g|k|l'
Genome2= 'ecd|l|a|g|b'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print(countDup(Genome1), countDup(Genome2))
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')
    
print("Case6: Check for reduction of count 1 in a geneblock ")
print("Genome 1: abb|ccd|ef|g|k|l")
print("Genome 2: ecd|l|a|g")
Genome1= 'abb|ccd|ef|g|k|l'
Genome2= 'ecd|l|a|g'
split1= countSplit(Genome1)
split2= countSplit(Genome2)
print("Result:", findSetInitial_Genome(Genome1,Genome2,split1,split2))
print()
print('******************************************************************')
